#
parameters:
  language:
  version:
  platform:
  configuration:
  experimentalNugetDependency: false
  vsComponents: ''
  listVsComponents: false
  installVsComponents: false

steps:
  - checkout: self # self represents the repo where the initial Pipelines YAML file was found
    clean: true # whether to fetch clean each time
    # fetchDepth: 2 # the depth of commits to ask Git to fetch
    lfs: false # whether to download Git-LFS files
    submodules: false # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
    persistCredentials: false # set to 'true' to leave the OAuth token in the Git config after the initial fetch

  # First do a build of the local package, since we point the cli at the local files, it needs to be pre-built
  - task: CmdLine@2
    displayName: yarn install (local react-native-windows)
    inputs:
      script: yarn install --frozen-lockfile

  - task: CmdLine@2
    displayName: yarn build
    inputs:
      script: yarn build

  - task: PowerShell@2
    displayName: Launch test npm server (verdaccio)
    inputs:
      targetType: inline
      script: |
        start-process npx -ArgumentList @('verdaccio', '--config', './.ado/verdaccio/config.yaml')

  - script: |
      npm set registry http://localhost:4873
    displayName: Modify default npm config to point to local verdaccio server

  - script: |
      node .ado/waitForVerdaccio.js
    displayName: Wait for verdaccio server to boot

  - script: |
      node .ado/npmAddUser.js user pass mail@nomail.com http://localhost:4873
    displayName: Add npm user to verdaccio

  - script: |
      npx --no-install beachball publish --branch origin/$(System.PullRequest.TargetBranch) --no-push --registry http://localhost:4873 --yes --access public
    displayName: Publish packages to verdaccio

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: ">=4.6.0"

  - task: CmdLine@2
    displayName: Install react-native cli
    inputs:
      script: npm install -g react-native-cli

  - task: DownloadBuildArtifacts@0
    displayName: 'Download TestMSRNNuget Artifact'
    inputs:
      artifactName: TestMSRNNuget.${{ parameters.platform }}.${{ parameters.configuration }}
      downloadPath: $(System.DefaultWorkingDirectory)
    condition: eq('true', ${{ parameters.experimentalNugetDependency }})

  - task: CmdLine@2
    displayName: Init new project
    inputs:
      script: react-native init testcli --version ${{ parameters.version }}
      workingDirectory: $(Agent.BuildDirectory)

  - task: CmdLine@2
    displayName: Apply windows template
    inputs:
      script: npx react-native-windows-init --version master --overwrite --language ${{ parameters.language }} --experimentalNugetDependency ${{ parameters.experimentalNugetDependency }}
      workingDirectory: $(Agent.BuildDirectory)\testcli

  - task: PowerShell@2
    displayName: Install private Microsoft.ReactNative package
    inputs:
      targetType: inline
      script: |
        Install-Package Microsoft.ReactNative -Source $(System.DefaultWorkingDirectory)/TestMSRNNuget.${{ parameters.platform }}.${{ parameters.configuration }} -Destination $(Agent.BuildDirectory)\testcli\windows\packages
    condition: eq('true', ${{ parameters.experimentalNugetDependency }})

  - task: NuGetCommand@2
    displayName: NuGet restore testcli
    inputs:
      command: restore
      restoreSolution: $(Agent.BuildDirectory)\testcli\windows\testcli.sln

  - template: install-SDK.yml
    parameters:
      sdkVersion: $(Win10Version)

  - task: PowerShell@2
    displayName: List Visual Studio Components
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)/.ado/VSComponentList.ps1
    condition: and(succeeded(), ${{ parameters.listVsComponents }})

  - task: PowerShell@2
    displayName: Install Visual Studio dependencies
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)/vnext/Scripts/Tfs/Install-VsFeatures.ps1
      arguments:
        -Components ${{ parameters.vsComponents }}
        -Cleanup:$true
    condition: and(succeeded(), ${{ parameters.installVsComponents }})

  - task: VSBuild@1
    displayName: VSBuild - testcli
    inputs:
      solution: $(Agent.BuildDirectory)\testcli\windows\testcli.sln
      vsVersion: $(MSBuildVersion) # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 4.0
      msbuildArchitecture: $(MSBuildArchitecture) # Optional. Options: x86, x64
      platform: ${{ parameters.platform }} # Optional
      configuration: ${{ parameters.configuration }} # Optional
      clean: false # Optional
      maximumCpuCount: false # Optional
      restoreNugetPackages: false # Optional
      createLogFile: true
      logFileVerbosity: detailed
      msbuildArgs:
        /p:PreferredToolArchitecture=$(MSBuildPreferredToolArchitecture)
        /p:PlatformToolset=$(MSBuildPlatformToolset)
        /p:AppxGeneratePrisForPortableLibrariesEnabled=false

  - task: PublishBuildArtifacts@1
    condition:  succeededOrFailed()
    timeoutInMinutes: 10
    inputs:
      pathtoPublish: $(Agent.BuildDirectory)/testcli/windows/testcli.sln.log
      artifactName: Detailed Logs for testcli.sln ${{ parameters.platform }} ${{ parameters.configuration }} ${{ parameters.experimentalNugetDependency }}
      publishLocation: 'Container'

  - task: CmdLine@2
    displayName: Create bundle testcli
    inputs:
      script: react-native bundle --entry-file index.js platform windows --bundle-output test.bundle
      workingDirectory: $(Agent.BuildDirectory)\testcli
